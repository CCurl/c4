( Strings )

3 >lex

: rl forget 3 load ;

: s-len   ( s--n ) c@ ;
: sz-len  ( sz--n ) s >r 0 begin
      s+ c@ 0= if r> >s exit then 1+
    again ;
: s-cat  ( d s--d )  >s >d
    s c@ 0= if d exit then
    d count + >a
    s c@  d c@ +  d c!
    s+ c@ for s+ c@ d+ c! next
    0 a c! d ;
: s-trunc ( d--d ) 0 over c! ;
: s-cpy ( d s--d ) >r s-trunc r> s-cat ;
: s-catc ( d c--d ) swap >d
    d count + >a
    d c@ 1+ d c!
    a+ c! 0 a c! d ;
: s-scatc ( c d--d ) swap s-catc ;
: s-catn ( d n--d ) drop ;

: p1 vhere ->vars 100 + ;
: p2 p1 100 + ;
: t1 p1 " hi" s-cpy count type ;
: t2 p1 " -there" s-cat count type ;
