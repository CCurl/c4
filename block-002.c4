( block 2 - editor )

3 load ( strings )
5 load ( screen )

( idea: )
( have 2 buffers, for 2 copies of the file, current and working )
( have a temp buffer for the current line )
( keep an array of addresses of where each line starts )
( keep that updated as things change )
( also sync the buffers up constantly as things change )

2 >lex  decimal

: rl forget 2 load ;

: lines      40 @c ;  : >lines      40 !c ;
: scr-top    41 @c ;  : >scr-top    41 !c ;
: rows       42 @c ;  : >rows       42 !c ;
: row        43 @c ;  : >row        43 !c ;
: col        44 @c ;  : >col        44 !c ;
: blk        45 @c ;  : >blk        45 !c ;
: dirty?     46 @c ;  : dirty     1 46 !c ;  : clean   0 46 !c ;
: block-sz   47 @c ;  : >block-sz   47 !c ;
: cols       48 @c ;  : >cols       48 !c ;
: ed-mode    49 @c ;  : >ed-mode    49 !c ;
: insert-mode  1 ;    : replace-mode  2 ;
: .mode space ed-mode dup 0= if ." -normal-" then
  dup insert-mode  = if ." -insert-" then
  replace-mode = if ." -replace-" then ;

5000 >block-sz
 200 >lines      100 >cols
   0 >scr-top     25 >rows

block-sz 2+ var block
block-sz 2+ var work
lines cells var (lines)
cols 2+     var cur-line

: norm ( n1 l h--n2 ) >r max r> min ;
: valid-line? ( n--f ) 0 lines btwi ;
: line  ( row--a )  dup valid-line? 0= if drop 0 exit then cell * (lines) + @ ;
: >line ( a row-- ) dup valid-line? 0= if 2drop  exit then cell * (lines) + ! ;
: real-row ( --n ) row scr-top + ;
: rc->pos  ( --n ) real-row line -if col + then ;
: ->cur   row 1+ col 1+ ->rc ;
: ->foot  rows 1+ 1 ->rc ;
: ->cmd   rows 2+ 1 ->rc ;
: mv-row ( n-- ) row + 0 rows 1- norm >row ;
: mv-col ( n-- ) col + 0 cols 1- norm >col ;
: mv ( r c-- ) mv-col mv-row ;
: lpar. '(' emit (.) ; : .rpar (.) ')' emit ;
: footer ->foot ."  - Block " blk . 
    dirty? if '*' else bl then emit
    space real-row 1+ lpar. ',' emit col 1+ .rpar .mode clr-eol ;
: show ( -- )  1 dup ->rc 
    rows for 
        i scr-top + line ?dup if ztype then 
        clr-eol cr
    next footer ;
: scroll scr-top + 0 lines rows - norm >scr-top show ;
: init-lines  (lines) 0 lines fill-c ;
: init-block  block 0 block-sz fill ;
: hex-dump base@ >r hex 1 +a
    for dup c@ .02 space 1+ a+ $20 > if cr 1 >a then next drop
    drop -a r> base !c ;
: dump-block  block block-sz hex-dump ;
: fopen-rb ( fn--fh ) 1+ z" rb" fopen ;
: fopen-wb ( fn--fh ) 1+ z" wb" fopen ;
: block-fn ( --fn ) p1 s" block-" s-cpy
    blk 10 /mod 10 /mod
    3 for p1 swap '0' + s-catc drop next
    s" .c4" s-cat ;

: prep-block ( -- ) init-lines
    block +a  0 +d  a> d+ >line
    begin
        a> c@ ?dup 0= if -d -a exit then
        dup 10 =
        if 0= a+ c! a> d+ >line
        else bl max a+ c!
        then
    again ;

: read-block block-fn fopen-rb ?dup if
   >r block block-sz r@ fread drop r> fclose 
   then ;
: save-block block-fn fopen-wb ?dup if
    >r block block-sz r@ fwrite drop r> fclose
    then ;

: load-block init-block read-block prep-block ;
: work->block work  block block-sz cmove ;
: block->work block work  block-sz cmove ;

: >cur-line cur-line s-trunc line ?dup if s-cpy drop then ;

: replace-char ( -- ) rc->pos ?dup if a> swap c! 0 1 mv then ;
: insert-blank ( -- ) ;
: insert-char ( -- ) insert-blank replace-char ;
: delete-char ( -- ) ;
: delete-line ( -- ) ;

: quit? 26 = ;
: do-ctrl ( -- )
    a>  3 = if  0 >ed-mode exit then ( stop )
    a>  8 = if  0 -1 mv exit then ( left )
    a> 12 = if  0  1 mv exit then ( right )
    a> 11 = if -1  0 mv exit then ( up )
    a> 10 = if  1  0 mv exit then ( down )
    a>  9 = if  0  8 mv exit then ( tab-right )
    a> 17 = if  0 -8 mv exit then ( tab-left )
    a>  4 = if  10 scroll exit then ( pgdn )
    a> 21 = if -10 scroll exit then ( pgup )
    a>  5 = if   1 scroll exit then ( scrdn )
    a> 25 = if  -1 scroll exit then ( scrup )
    ;
: do-work ( c-- ) >a
    a> bl < if do-ctrl exit then
    ed-mode insert-mode  = if insert-char  exit then
    ed-mode replace-mode = if replace-char exit then
    a> 'h' = if  0 -1 mv exit then ( left )
    a> 'l' = if  0  1 mv exit then ( right )
    a> 'k' = if -1  0 mv exit then ( up )
    a> 'j' = if  1  0 mv exit then ( down )
    a> 'q' = if  0  8 mv exit then ( tab-right )
    a> 'Q' = if  0 -8 mv exit then ( tab-left )
    a> '_' = if  0 >col  exit then ( home )
    a> '$' = if  cols 1- >col exit then ( end )
    a> 'i' = if insert-mode >ed-mode  exit then
    a> 'r' = if replace-mode key >a replace-char exit then
    a> 'R' = if replace-mode >ed-mode exit then
    ;
: ed-loop begin show ->cur key dup quit? if drop exit then do-work again ;
: ed-init 0 >ed-mode 0 >row 0 >col 0 >scr-top ;
: edit ( blk-- ) >blk load-block ed-init cls ed-loop ->cmd ;
