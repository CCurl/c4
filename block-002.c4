2 >lex

: rl forget 2 load ;

: csi 27 emit '[' emit ;
: cur-on  ( -- )       csi ." ?25h" ;
: cur-off ( -- )       csi ." ?25l" ;
: ->cr    ( r c-- )    csi (.) ';' emit (.) 'H' emit ;
: ->rc    ( c r-- )    swap ->cr ;
: cls     ( -- )       csi ." 2J" 1 dup ->rc ;
: clr-eol ( -- )       csi ." 0K" ;
: color   ( bg fg-- )  csi (.) ';' emit (.) 'm' emit ;
: fg      ( fg-- )     40 swap color ;

: rows ( --n ) 40 @c ; : >rows ( n-- ) 40 !c ;
: cols ( --n ) 41 @c ; : >cols ( n-- ) 41 !C ;
: row  ( --n ) 42 @c ; : >row  ( n-- ) 42 !c ;
: col  ( --n ) 43 @c ; : >col  ( n-- ) 43 !c ;
: pos  ( --n ) 44 @c ; : >pos  ( n-- ) 44 !c ;
: block-sz rows cols * ;

30 >rows 100 >cols
var block
block-sz allot

: rc->pos ( -- )  row cols * col + >pos ;
: pos->rc ( -- )  pos cols /mod >row >col ;
: ->pos   ( -- )  pos->rc row 1+ col 1+ ->rc ;
: ->cmd   ( -- )  rows 2+ 1 ->rc ;
: show    ( -- )  1 dup ->rc block >a
	rows for 
		a cols type cr
		a cols + >a
	next ;
: fill ( from char num-- )
    a >r   >r swap >a
    r> for dup a+ c! next
	drop  r> >a ;

: dump ( from num-- ) for dup c@ . 1+ next  drop ;
: move ( dist-- ) pos + 0 over max block-sz min >pos pos->rc ;
: test-block block 'a' block-sz fill ;
: init-block block  0  block-sz fill ;
: dump-block block block-sz dump ;

: fopen-rb ( fn--fh )  " rb" fopen ;
: fopen-wb ( fn--fh )  " wb" fopen ;

: read-block " block-000.c4" fopen-rb >a
    a if block block-sz a fread drop  a fclose then ;
: save-block " block-000.c4" fopen-wb >a
    a if block block-sz a fwrite  a fclose then ;
