: ->code cell * code + ;
: @c ->code @ ;
: !c ->code ! ;
: cells cell * ;
: cell+ cell + ;
: ->dict 32 * dict + ;
: here  (ha)    @ ;
: last  (la)    @ ;
: vhere (vha)   @ ;
: 0sp  0 (dsp)  ! ;
: 0rsp 0 (rsp)  ! ;
: , here  dup 1+ (ha) ! !c ;
: begin here ; immediate
: again (jmp)   , , ; immediate
: while (jmpnz) , , ; immediate
: until (jmpz)  , , ; immediate
: -while (njmpnz) , , ; immediate
: -until (njmpz)  , , ; immediate
: if  (jmpz)  , here 0 , ; immediate
: -if (njmpz) , here 0 , ; immediate
: if0 (jmpnz) , here 0 , ; immediate
: else (jmp) , here swap 0 , here swap !c ; immediate
: then here swap !c ; immediate
: ( begin
    >in @ c@ dup 0= if drop exit then
    >in @ 1+ >in !
    ')' = if exit then
    again ; immediate

( testing 123 )
: base@ base @ ;
: base! base ! ;

: <# ( -- )     dict 64 + >t 0 t@ c! ;
: #c ( c-- )    t@ 1- dup t! c! ;
: #n ( n-- )    dup 9 > if 7 + then '0' + #c ;
: #  ( n1--n2 ) base@ /mod swap #n ;
: #s ( n-- )    begin # -while drop ;
: #> ( --str )  t> ;
: space 32 emit ;
: .  ( N-- ) <# #s #>  ztype space ;
: .2 ( N-- ) <# # #s #> ztype space ;

: hex     $10 base! ;
: binary  %10 base! ;
: decimal #10 base! ;
: .hex base@ >t hex    . t> base! ;
: .bin base@ >t binary . t> base! ;
: ?dup -if dup then ;
: nip swap drop ;        : tuck swap over ;
: 2dup over over ;       : 2drop drop drop ;
: rot >r swap r> swap ;  : -rot swap >r swap r> ;
: tdrop t> drop ;
: 0< 0 < ;            : 0> 0 > ;
: <= > 0= ;           : >= < 0= ;      : <> = 0= ;
: 2+ 1+ 1+ ;          : 2* dup + ;     : 2/ 2 / ;
: min ( a b--c ) 2dup > if swap then drop ;
: max ( a b--c ) 2dup < if swap then drop ;
: btwi ( n l h--f ) >t over >  swap t> >  or 0= ;
: negate com 1+ ;
: abs  dup 0< if negate then ;
: -abs dup 0> if negate then ;
: mod /mod drop ;
: +! tuck @ + swap ! ;     : c+! tuck c@ + swap c! ;
: c++ dup c@ 1+ swap c! ;  : c-- dup c@ 1- swap c! ;
: cr 13 emit 10 emit ;
: tab 9 emit ;
: ?  @ . ;
: does> (jmp) , r> , ;
: create addword (lit) , vhere , ; ( NB: needs EXIT added )
: const ( N-- ) addword (lit) , , (exit) , ;
: allot ( sz-- ) vhere + (vha) ! ;
: var   ( SZ-- ) vhere const , allot ;
: marker here 20 !c last 21 !c vhere 22 !c ;
: forget 20 @c (ha) ! 21 @c (la) ! 22 @c (vha) ! ;
: fopen-rt ( fn--fh )  " rt" fopen ;
: fopen-rb ( fn--fh )  " rb" fopen ;
: fopen-wb ( fn--fh )  " wb" fopen ;
: words  last >t  0 >r
    begin
        t@ ->dict cell+ 2+ ztype tab
        t@ ->dict cell+ 1+ c@ 7 > if r@ 1+ r! then
        r@ 1+ r! r@ 9 > if cr 0 r! then
        t@ 1+ t! t@ 999 >
    until rdrop tdrop ;

: a>t a@ >t ; : t>a t> a! ;

marker
: dump ( f t-- ) cr >t >r begin r@ dup 1+ r! c@ . r@ t@ > until rdrop tdrop ;
: dumpc ( f t-- ) cr >t >r begin r@ dup 1+ r! @c . r@ t@ > until rdrop tdrop ;
: .ver version <# # # '.' #c # # '.' #c #s #> ;
" c4 - version " ztype  .ver cr " hello." ztype

here dup . cr
cell var b
here dup . cr dumpc cr

( : b@ b @ ;           : b! b ! ; )
( : b+ b@ 1+ b! ;      : b- b@ 1- b! ;  )
( : b@+ b@ dup 1+ b! ; : b@- b@ dup 1- b! ;  )
( : @b b@ c@ ;         : !b b@ c! ; )
( : @b+ b@+ c@ ;       : !b+ b@+ c! ; )
