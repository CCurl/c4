( block 004 - a simple memory manager )

find mb loaded?

3 load

4 >lex
( mem-buf-slot-info: )
( cell 1: bit #1: 0=free, 1=in-ise, #2-<x> size )
( NOTE: a size of 0 means unallocated )

: rl forget 4 load ;

: mb-sz #10000 ;  ( memory buffer size )
: mb-ssz  #250 ;  ( memory buffer slots size )
: mb-ruv   #25 ;  ( round-up value )

mb-sz        var mb     ( memory-buffer )
cell         var (mbh)  ( here )
mb-ssz cells var mb-sa  ( slot-address )
mb-ssz cells var mb-si  ( slot-info )

: mb-here (mbh) @ ;  : >mb-here (mbh) ! ;
: mb-slot-a ( n--a ) cells mb-sa + ;
: mb-slot-i ( n--a ) cells mb-si + ;

: mb-init ( -- )
  mb >mb-here
  mb mb-sz 0 fill
  mb-sa 0 mb-ssz fill-c
  mb-si 0 mb-ssz fill-c ;

: mb-end ( --a ) mb mb-sz + ;
: mb-ru ( sz--n ) mb-ruv / 1+ mb-ruv * ;
: mb-new ( sz--h ) mb-here tuck +
  dup mb-end > if = exit then
  >mb-here ;

: mbd cr mb-ssz 1 +a for
    i mb-slot-i @ ?dup if 0 >a i . . i mb-slot-a @ . cr then
  next a> if ." (empty)" then -a ;

: mb-free? ( n sz--f )
  +s  mb-slot-i @ +a
  a> 0= if 1 then        ( not allocated )
  a> 0< if 0 then        ( allocated, in-use )
  a> 0> if s> a> <= then   ( allocated-free )
  -a -s ;

: alloc ( sz--h - 0 means error )
  +s  0 +a   a> +d
  begin
    d> s> mb-free?
    if d> mb-slot-a @ >a  0
    else d+ mb-ssz < then
  while
  d> mb-ssz < if
    a> 0= if
      s> mb-ru >s   s> mb-new >a
      a> if  a> d> mb-slot-a !  s> d> mb-slot-i !  then
    then
    d> mb-slot-i @ -abs d> mb-slot-i !
  then
  a>  -d -a -s ;

: free ( h-- )
  +a  0 +d begin
    d> mb-slot-a @ dup 0= 
    if  drop -d -a exit  then
    a> = if
      d> mb-slot-i @ abs d> mb-slot-i !
      mb-ssz >d
    then
    d+ mb-ssz <
  while -d -a ;

mb-init

( some tests )
: t1 49 alloc >a a> . mbd ;
: t2 80 alloc >d d> . mbd ;
: t3 200 alloc >s s> . mbd ;
: t4 s>  free mbd ;
: t5 d>  free mbd ;
: t6 a>  free mbd ;
